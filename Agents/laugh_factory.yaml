Descriptor:
  Name: TheLaughFactory
  DisplayName: The Laugh Factory
  Description: This agent creates jokes about a subject and sends them to the server

SkillGroups:
  # Agents are just another type of skill
  - Format: API
    Settings:
      OpenApiSpecUrl: https://raw.githubusercontent.com/teebu/ms-ot/refs/heads/main/Tools/ComplexPayloadTool/post_openapi.yaml
  - Format: GPT
    Skills:
      - Name: CreateJoke
        DisplayName: Create Joke
        Description: Create a joke about a subject
        Inputs:
          - Name: subject
            Description: Subject for the joke
            DefaultValue: dogs
            Required: true
        Settings:
          ModelName: gpt-4o
          Template: |-
            <instructions>
            You are a comedian, you tell funny jokes. 

            Given a subject you will create 1 question/answer joke.

            Example json payload:
            ```json
              {
                "question": "Why did the dog sit in the shade?"
                "answer": "Because he didn't want to be a hot dog!",
              }
            ```
            <instructions>

            Subject: {{subject}}
  - Format: Agent
    Skills:
      - Name: ComedianAgent
        DisplayName: Comedian Agent
        Description: The Comedian Agent creates jokes and submits them to the server.
        DescriptionForModel: |
          The user requests a joke about a specific subject, and the agent generates a humorous question/answer joke based on the subject. 
          The agent formats the joke as a JSON payload and submits it to the server.    

          #ExamplePrompt: tell me a joke about a dog
          #ExamplePrompt: make a joke about cats
          #ExamplePrompt: create a funny joke about programmers
          #ExamplePrompt: tell me a joke about chickens
          #ExamplePrompt: make a joke about robots
          #ExamplePrompt: create a joke about pizza
          #ExamplePrompt: tell me a joke about teachers
          #ExamplePrompt: make a joke about cars
          #ExamplePrompt: create a funny joke about coffee
          #ExamplePrompt: tell me a joke about bananas
        Inputs:
          - Name: subject
            Description: Subject for the joke
            DefaultValue: dogs
            Required: true
        Interfaces:
          - Agent
        Settings:
          Instructions: |
            Use the **CreateJoke** child skill to generate 5 jokes about a given subject.

            Return the 5 jokes in this array format:
            ```json
            [
              {
                "question": "Why did the dog sit in the shade?",
                "answer": "Because he didn't want to be a hot dog!"
              },
              ...
            ]
            ```

            Then, call the **submitJokes** child skill to submit the full array of 5 jokes.
            - wrap the json payload with a parameter `requestBody` as input for submitJokes


            Example payload:
            requestBody=
            ```json
            [
              {
                "question": "Why did the dog sit in the shade?",
                "answer": "Because he didn't want to be a hot dog!"
              },
              {
                "question": "What do you call fake spaghetti?",
                "answer": "An impasta!"
              }
            ]
            ```

            Next, select the **best joke** from the list.  
            - Display the best joke  
            - Provide a brief **reason** why you chose it

        ChildSkills:
          - CreateJoke
          - submitJokes

      - Name: TestSimplePayload
        DisplayName: Text Simple payload
        Description: Send a comSimpleplex payload to a webhook
        DescriptionForModel: |
          Send a simple payload to a webhook. The payload contains an array objects
          #ExamplePrompt: send simple payload to webhook
        Interfaces:
          - Agent
        Settings:
          Instructions: |
            Send this complex payload to the webhook using submitJoke child skill:

            payload:
            ```json
              {
                "question": "Why did the dog sit in the shade?",
                "answer": "Because he didn't want to be a hot dog!"
              }          
            ```
        ChildSkills:
          - submitJoke

      - Name: TestComplexPayload
        DisplayName: Text complex payload
        Description: Send a complex payload to a webhook
        DescriptionForModel: |
          Send a complex payload to a webhook. The payload contains an array objects
          #ExamplePrompt: send complex payload to webhook
        Interfaces:
          - Agent
        Settings:
          Instructions: |
            Send this complex payload to the webhook using submitJokes child skill:
            - wrap the json payload with a parameter `requestBody` as input for submitJokes

            payload:
            ```json
            [
              {
                "question": "Why did the dog sit in the shade?",
                "answer": "Because he didn't want to be a hot dog!"
              },
              {
                "question": "What do you call fake spaghetti?",
                "answer": "An impasta!"
              }
            ]
            ```
        ChildSkills:
          - submitJokes

      - Name: TestComplexPayloadTwo
        DisplayName: Text complex two payload
        Description: Send a complex two payload to a webhook
        DescriptionForModel: |
          Send a complex2 payload to a webhook. The payload contains an array objects
          #ExamplePrompt: send complex payload to webhook
        Interfaces:
          - Agent
        Settings:
          Instructions: |
            Send this complex payload to the webhook using submit_jokes_two child skill:
             - wrap the json payload with a parameter `requestBody` as input for submitJokes

            Example payload:
            requestBody=
            ```json
              {
                "question": "Why did the dog sit in the shade?",
                "answers": [
                  "Because he didn't want to be a hot dog!",
                  "Because it was too sunny!"
                ]
              }
            ```
        ChildSkills:
          - submit_jokes_two

      - Name: TestComplexPayloadThree
        DisplayName: Text complex three payload
        Description: Send a complex three payload to a webhook
        DescriptionForModel: |
          Send a complex2 payload to a webhook. The payload contains an array objects
          #ExamplePrompt: send complex payload to webhook
        Inputs:
          - Name: subject
            Description: Subject for the joke
            DefaultValue: dogs
            Required: true
        Interfaces:
          - Agent
        Settings:
          Instructions: |
            Subject: {{subject}}

            Use the **CreateJoke** child skill to generate 5 jokes about a given subject.

            Return the 5 jokes in this JSON format:

            ```json
            {
              "jokes": [
                { "Why did the dog sit in the shade?": "Because he didn't want to be a hot dog!" },
                { "What do you call fake spaghetti?": "An impasta!" },
                { "Why was the math book sad?": "Because it had too many problems." },
                { "Why don't skeletons fight each other?": "They don't have the guts." },
                { "Why can't your nose be 12 inches long?": "Because then it would be a foot." }
              ]
            }
            ```

            Then, call the **submit_jokes_three** child skill to submit the full set of 5 jokes.

            * Wrap the JSON payload with a parameter `requestBody` as input for **submit_jokes_three**.

            Example payload:

            ```json
            requestBody = {
              "jokes": [
                { "Why did the dog sit in the shade?": "Because he didn't want to be a hot dog!" },
                { "What do you call fake spaghetti?": "An impasta!" }
              ]
            }
            ```

            Next, select the **best joke** from the list.

            * Display the best joke in `question: answer` format.
            * Provide a brief **reason** why you chose it.
        ChildSkills:
          - createJoke
          - submit_jokes_three
    Settings:
      HistoryPassDownMode: None
      IncludeSessionHistory: false
